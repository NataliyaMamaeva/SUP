// <auto-generated />
using System;
using ERP.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.Migrations
{
    [DbContext(typeof(ErpContext))]
    partial class ErpContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ERP.Models.Client", b =>
                {
                    b.Property<int>("ClientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClientId"));

                    b.Property<string>("City")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<DateOnly?>("FirstRequstDate")
                        .HasColumnType("date");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ClientId")
                        .HasName("PK__Client__E67E1A2458A459C2");

                    b.ToTable("Client", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"));

                    b.Property<string>("ColorName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ColorId")
                        .HasName("PK__Color__8DA7674D668C3A7C");

                    b.ToTable("Color", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Contact", b =>
                {
                    b.Property<int>("ContactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("ContactName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Passport")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("ContactId")
                        .HasName("PK__Contact__5C66259B016BAD5B");

                    b.HasIndex("ClientId");

                    b.ToTable("Contact", (string)null);
                });

            modelBuilder.Entity("ERP.Models.DeliveryAddress", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AddressId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("DeliveryAddress1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("DeliveryAddress");

                    b.HasKey("AddressId")
                        .HasName("PK__Delivery__091C2AFBEF6FC892");

                    b.HasIndex("ClientId");

                    b.ToTable("DeliveryAddress", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("EmployeeId"));

                    b.Property<int?>("BossId")
                        .HasColumnType("int")
                        .HasColumnName("BossId");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool?>("IsFired")
                        .HasColumnType("bit");

                    b.Property<string>("Passport")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Position")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("EmployeeId")
                        .HasName("PK__Employee__7AD04F11CD55FEBC");

                    b.HasIndex("BossId");

                    b.ToTable("Employee", (string)null);
                });

            modelBuilder.Entity("ERP.Models.ErpUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Item", b =>
                {
                    b.Property<int>("ItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemId"));

                    b.Property<int?>("Amount")
                        .HasColumnType("int");

                    b.Property<string>("Colors")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly?>("Deadline")
                        .HasColumnType("date");

                    b.Property<string>("ItemDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ItemType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Materials")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(10,2)");

                    b.Property<int>("ProjectId")
                        .HasColumnType("int");

                    b.Property<string>("SketchPath")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ItemId")
                        .HasName("PK__Item__727E838BFA193C84");

                    b.HasIndex("ProjectId");

                    b.ToTable("Item", (string)null);
                });

            modelBuilder.Entity("ERP.Models.ItemsType", b =>
                {
                    b.Property<int>("ItemTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ItemTypeId"));

                    b.Property<string>("ItemTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ItemTypeId")
                        .HasName("PK__ItemType__F51540FBE00BE195");

                    b.ToTable("ItemType", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Material", b =>
                {
                    b.Property<int>("MaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MaterialId"));

                    b.Property<string>("MaterialName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("MaterialId")
                        .HasName("PK__Material__C50610F7B32E7551");

                    b.ToTable("Material", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Project", b =>
                {
                    b.Property<int>("ProjectId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectId"));

                    b.Property<decimal?>("AdvanceRate")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date");

                    b.Property<int?>("DeliveryToAddress")
                        .HasColumnType("int");

                    b.Property<int?>("DeliveryToContact")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("EmployeePayment")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateOnly?>("EventDate")
                        .HasColumnType("date");

                    b.Property<bool?>("IsArchived")
                        .HasColumnType("bit");

                    b.Property<string>("Journal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("PaymentDate")
                        .HasColumnType("date");

                    b.Property<decimal?>("PaymentTotal")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ProjectName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("ProjectId")
                        .HasName("PK__Project__761ABEF006CB3F38");

                    b.HasIndex("ClientId");

                    b.HasIndex("DeliveryToAddress");

                    b.HasIndex("DeliveryToContact");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Project", (string)null);
                });

            modelBuilder.Entity("ERP.Models.ProjectFile", b =>
                {
                    b.Property<int>("FileId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FileId"));

                    b.Property<string>("FileDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileTitle")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("FileType")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<DateTime>("UploadedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("FileId")
                        .HasName("PK__ProjectF__6F0F98BF593087A7");

                    b.HasIndex("ItemId");

                    b.HasIndex("ProjectId");

                    b.ToTable("ProjectFile", (string)null);
                });

            modelBuilder.Entity("ERP.Models.ProjectPayment", b =>
                {
                    b.Property<int>("ProjectPaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProjectPaymentId"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateOnly>("MonthPointer")
                        .HasColumnType("date");

                    b.Property<int?>("PartNumber")
                        .HasColumnType("int");

                    b.Property<int?>("PartsCount")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Punishment")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<string>("PunishmentDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SalaryId")
                        .HasColumnType("int");

                    b.Property<bool?>("isStagerAdd")
                        .HasColumnType("bit");

                    b.HasKey("ProjectPaymentId")
                        .HasName("PK__ProjectP__D131DB604907FF91");

                    b.HasIndex("ProjectId");

                    b.HasIndex("SalaryId");

                    b.ToTable("ProjectPayment", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Requisite", b =>
                {
                    b.Property<int>("RequisiteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RequisiteId"));

                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FileTitle")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime?>("UploadedAt")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.HasKey("RequisiteId")
                        .HasName("PK__Requisit__32FEEC2884A854AA");

                    b.HasIndex("ClientId");

                    b.ToTable("Requisite", (string)null);
                });

            modelBuilder.Entity("ERP.Models.SalaryEmployeeMonth", b =>
                {
                    b.Property<int>("SalaryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SalaryId"));

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal?>("FinallyAmount")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<decimal?>("FixSalary")
                        .HasColumnType("decimal(8, 2)");

                    b.Property<DateOnly>("MonthPointer")
                        .HasColumnType("date");

                    b.Property<bool>("isClosed")
                        .HasColumnType("bit");

                    b.HasKey("SalaryId")
                        .HasName("PK__SalaryEm__4BE2045780727A81");

                    b.HasIndex("EmployeeId");

                    b.ToTable("SalaryEmployeeMonth", (string)null);
                });

            modelBuilder.Entity("ERP.Models.TaskItem", b =>
                {
                    b.Property<int>("TaskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TaskId"));

                    b.Property<DateOnly>("Deadline")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int");

                    b.HasKey("TaskId")
                        .HasName("PK__Task__7C6949B15FF753D3");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("ProjectId");

                    b.ToTable("Task", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Website", b =>
                {
                    b.Property<int?>("ClientId")
                        .HasColumnType("int");

                    b.Property<string>("Website1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("Website");

                    b.HasIndex("ClientId");

                    b.ToTable("Website", (string)null);
                });

            modelBuilder.Entity("ERP.Models.YandexAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("ExpiryDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("bit");

                    b.Property<string>("RefreshToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("YandexAccounts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ERP.Models.Contact", b =>
                {
                    b.HasOne("ERP.Models.Client", "Client")
                        .WithMany("Contacts")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__Contact__ClientI__48CFD27E");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ERP.Models.DeliveryAddress", b =>
                {
                    b.HasOne("ERP.Models.Client", "Client")
                        .WithMany("DeliveryAddresses")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__DeliveryA__Clien__45F365D3");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ERP.Models.Employee", b =>
                {
                    b.HasOne("ERP.Models.Employee", "Boss")
                        .WithMany()
                        .HasForeignKey("BossId");

                    b.Navigation("Boss");
                });

            modelBuilder.Entity("ERP.Models.ErpUser", b =>
                {
                    b.HasOne("ERP.Models.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ERP.Models.Item", b =>
                {
                    b.HasOne("ERP.Models.Project", "Project")
                        .WithMany("Items")
                        .HasForeignKey("ProjectId")
                        .IsRequired()
                        .HasConstraintName("FK__Item__ProjectId__5441852A");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Models.Project", b =>
                {
                    b.HasOne("ERP.Models.Client", "Client")
                        .WithMany("Projects")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__Project__ClientI__4222D4EF");

                    b.HasOne("ERP.Models.DeliveryAddress", "DeliveryToAddressNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("DeliveryToAddress")
                        .HasConstraintName("FK__Project__Deliver__4316F928");

                    b.HasOne("ERP.Models.Contact", "DeliveryToContactNavigation")
                        .WithMany("Projects")
                        .HasForeignKey("DeliveryToContact")
                        .HasConstraintName("FK_Project_DeliveryToContact");

                    b.HasOne("ERP.Models.Employee", "Employee")
                        .WithMany("Projects")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__Project__Employe__412EB0B6");

                    b.Navigation("Client");

                    b.Navigation("DeliveryToAddressNavigation");

                    b.Navigation("DeliveryToContactNavigation");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ERP.Models.ProjectFile", b =>
                {
                    b.HasOne("ERP.Models.Item", "Item")
                        .WithMany()
                        .HasForeignKey("ItemId");

                    b.HasOne("ERP.Models.Project", "Project")
                        .WithMany("ProjectFiles")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__ProjectFi__Proje__47DBAE45");

                    b.Navigation("Item");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Models.ProjectPayment", b =>
                {
                    b.HasOne("ERP.Models.Project", "Project")
                        .WithMany("ProjectPayments")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__ProjectPa__Proje__7D439ABD");

                    b.HasOne("ERP.Models.SalaryEmployeeMonth", "Salary")
                        .WithMany("ProjectPayments")
                        .HasForeignKey("SalaryId")
                        .HasConstraintName("FK__ProjectPa__Salar__7C4F7684");

                    b.Navigation("Project");

                    b.Navigation("Salary");
                });

            modelBuilder.Entity("ERP.Models.Requisite", b =>
                {
                    b.HasOne("ERP.Models.Client", "Client")
                        .WithMany("Requisites")
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__Requisite__Clien__6FE99F9F");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("ERP.Models.SalaryEmployeeMonth", b =>
                {
                    b.HasOne("ERP.Models.Employee", "Employee")
                        .WithMany("SalaryEmployeeMonths")
                        .HasForeignKey("EmployeeId")
                        .HasConstraintName("FK__SalaryEmp__Emplo__797309D9");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("ERP.Models.TaskItem", b =>
                {
                    b.HasOne("ERP.Models.Employee", "Employee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId")
                        .IsRequired()
                        .HasConstraintName("FK__Task__EmployeeId__76969D2E");

                    b.HasOne("ERP.Models.Project", "Project")
                        .WithMany("Tasks")
                        .HasForeignKey("ProjectId")
                        .HasConstraintName("FK__Task__ProjectId__75A278F5");

                    b.Navigation("Employee");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("ERP.Models.Website", b =>
                {
                    b.HasOne("ERP.Models.Client", "Client")
                        .WithMany()
                        .HasForeignKey("ClientId")
                        .HasConstraintName("FK__Website__ClientI__5DCAEF64");

                    b.Navigation("Client");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ERP.Models.ErpUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ERP.Models.ErpUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.Models.ErpUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ERP.Models.ErpUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.Models.Client", b =>
                {
                    b.Navigation("Contacts");

                    b.Navigation("DeliveryAddresses");

                    b.Navigation("Projects");

                    b.Navigation("Requisites");
                });

            modelBuilder.Entity("ERP.Models.Contact", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ERP.Models.DeliveryAddress", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("ERP.Models.Employee", b =>
                {
                    b.Navigation("Projects");

                    b.Navigation("SalaryEmployeeMonths");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ERP.Models.Project", b =>
                {
                    b.Navigation("Items");

                    b.Navigation("ProjectFiles");

                    b.Navigation("ProjectPayments");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("ERP.Models.SalaryEmployeeMonth", b =>
                {
                    b.Navigation("ProjectPayments");
                });
#pragma warning restore 612, 618
        }
    }
}
